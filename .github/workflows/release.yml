name: 🚀 Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  PLUGIN_NAME: ${{ github.event.repository.name }}

jobs:
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-stable: ${{ steps.version.outputs.is-stable }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract and Validate Version
        id: version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_VERSION" >> "$GITHUB_OUTPUT"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          
          if [[ "$TAG_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-stable=true" >> "$GITHUB_OUTPUT"
            echo "is-prerelease=false" >> "$GITHUB_OUTPUT"
            echo "✅ Stable release detected: $TAG_VERSION"
          else
            echo "is-stable=false" >> "$GITHUB_OUTPUT"
            echo "is-prerelease=true" >> "$GITHUB_OUTPUT"
            echo "🧪 Pre-release detected: $TAG_VERSION"
          fi

      - name: 📋 Validate Plugin Files
        run: |
          required_files=("pkl-wpz-rest-api-auth.php" "readme.txt")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

  build:
    name: 🔨 Build & Package
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: write

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: 💾 Update and Commit Version (Stable Only)
        if: needs.validate.outputs.is-stable == 'true'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Checkout main branch
          echo "📌 Switching to main branch..."
          git checkout main
          
          # Pull latest changes
          echo "⬇️ Pulling latest changes..."
          git pull origin main
          
          # Update all version files
          echo "🔄 Updating version to: $VERSION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # 1. Update pkl-wpz-rest-api-auth.php (Version comment)
          sed -i "s/\* Version: .*/\* Version: $VERSION/" pkl-wpz-rest-api-auth.php
          echo "✅ Updated Version comment"
          
          # 2. Update PKL_WPZ_REST_API_AUTH_VERSION constant
          sed -i "s/define([[:space:]]*'PKL_WPZ_REST_API_AUTH_VERSION'[[:space:]]*,[[:space:]]*'[^']*'[[:space:]]*);/define( 'PKL_WPZ_REST_API_AUTH_VERSION', '$VERSION' );/" pkl-wpz-rest-api-auth.php
          echo "✅ Updated PKL_WPZ_REST_API_AUTH_VERSION constant"
          
          # 3. Update readme.txt
          if [[ -f "readme.txt" ]]; then
            sed -i "s/Stable tag: .*/Stable tag: $VERSION/" readme.txt
            echo "✅ Updated readme.txt"
          fi
          
          # 4. Update README.md badge
          if [[ -f "README.md" ]]; then
            sed -i "s/Stable_Plugin_Version%20-v[^%]*/Stable_Plugin_Version%20-v$VERSION/" README.md
            echo "✅ Updated README.md badge"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Show updated lines
          echo "📋 Updated lines in pkl-wpz-rest-api-auth.php:"
          grep -n "Version:" pkl-wpz-rest-api-auth.php | head -1
          grep -n "PKL_WPZ_REST_API_AUTH_VERSION" pkl-wpz-rest-api-auth.php
          
          if [[ -f "readme.txt" ]]; then
            echo ""
            echo "📋 Updated line in readme.txt:"
            grep -n "Stable tag:" readme.txt
          fi
          
          if [[ -f "README.md" ]]; then
            echo ""
            echo "📋 Updated badge in README.md:"
            grep "Stable_Plugin_Version" README.md
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          # Check if there are changes
          if git diff --quiet; then
            echo "ℹ️ No changes to commit"
          else
            echo "📝 Committing changes..."
            git add pkl-wpz-rest-api-auth.php readme.txt README.md
            git commit -m "🔖 Bump version to $VERSION [skip ci]"
            git push origin main
          
            echo "✅ Version $VERSION pushed to main branch"
          fi

      - name: 📦 Create Distribution Package
        run: |
          echo "📦 Creating clean distribution package..."
          
          TEMP_DIR=$(mktemp -d)
          DIST_DIR="$TEMP_DIR/${{ env.PLUGIN_NAME }}"
          
          mkdir -p "$DIST_DIR"
          
          # Copy files, excluding development files
          rsync -av \
            --exclude='.git*' \
            --exclude='.github/' \
            --exclude='.vscode/' \
            --exclude='.idea/' \
            --exclude='node_modules/' \
            --exclude='tests/' \
            --exclude='*.md' \
            --exclude='*.json' \
            --exclude='*.lock' \
            --exclude='*.log' \
            --exclude='*.tmp' \
            --exclude='*.ps1' \
            --exclude='update-version.js' \
            --exclude='composer.*' \
            --exclude='package*' \
            --exclude='yarn.lock' \
            ./ "$DIST_DIR/"
          
          cd "$TEMP_DIR"
          ZIP_FILE="${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}.zip"
          zip -r "$ZIP_FILE" "${{ env.PLUGIN_NAME }}/"
          
          mv "$ZIP_FILE" "$GITHUB_WORKSPACE/"
          
          echo "📊 Package Information:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ls -lh "$GITHUB_WORKSPACE/$ZIP_FILE"
          echo ""
          echo "Package contents:"
          unzip -l "$GITHUB_WORKSPACE/$ZIP_FILE" | head -20
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package
          path: ${{ env.ZIP_FILE }}
          retention-days: 30

  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [ validate, build ]
    permissions:
      contents: write

    steps:
      - name: 📥 Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-package

      - name: 📋 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is-prerelease }}"
          
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            RELEASE_TITLE="Pre-Release v${VERSION}"
            RELEASE_TYPE_BADGE="🧪 Pre-release"
          else
            RELEASE_TITLE="Release v${VERSION}"
            RELEASE_TYPE_BADGE="✅ Stable"
          fi
          
          cat << EOF > release-notes.md
          # ${RELEASE_TITLE}
          
          ### 📦 Package Information
          - **Version**: \`${VERSION}\`
          - **Type**: ${RELEASE_TYPE_BADGE}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 📥 Installation
          1. Download the plugin zip file below
          2. Upload to your WordPress site via Admin → Plugins → Add New → Upload
          3. Activate the plugin
          
          ---
          *This release was automatically generated by GitHub Actions*
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: "Release v${{ needs.validate.outputs.version }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          files: |
            ${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Release Summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Release v${{ needs.validate.outputs.version }} created successfully!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 Package: ${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}.zip"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"