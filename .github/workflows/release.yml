name: 🚀 Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  PLUGIN_NAME: ${{ github.event.repository.name }}

jobs:
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-stable: ${{ steps.version.outputs.is-stable }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract and Validate Version
        id: version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$TAG_VERSION" >> "$GITHUB_OUTPUT"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          
          if [[ "$TAG_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-stable=true" >> "$GITHUB_OUTPUT"
            echo "is-prerelease=false" >> "$GITHUB_OUTPUT"
            echo "✅ Stable release detected: $TAG_VERSION"
          else
            echo "is-stable=false" >> "$GITHUB_OUTPUT"
            echo "is-prerelease=true" >> "$GITHUB_OUTPUT"
            echo "🧪 Pre-release detected: $TAG_VERSION"
          fi

      - name: 📋 Validate Plugin Files
        run: |
          required_files=("pkl-api-auth.php" "readme.txt")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

  build:
    name: 🔨 Build & Package
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Setup Git Configuration
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config --global pull.rebase true

      - name: 🔄 Smart Branch Sync
        run: |
          echo "🔍 Checking current state..."
          git status
          
          # Get the current commit hash
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Current commit: $CURRENT_COMMIT"
          
          # Fetch latest main
          git fetch origin main
          
          # Check if we're already on main or if main has diverged
          if git merge-base --is-ancestor HEAD origin/main; then
            echo "✅ Current commit is ancestor of main, safe to proceed"
            git checkout main
            git reset --hard origin/main
          elif git merge-base --is-ancestor origin/main HEAD; then
            echo "✅ Main is ancestor of current commit, creating new branch"
            # Create a temporary branch from current state
            git checkout -b "temp-release-${{ needs.validate.outputs.version }}"
          else
            echo "⚠️ Branches have diverged, using current tagged state"
            # Stay on current commit, don't try to sync with main
            echo "Using tagged commit as base for release"
          fi

      - name: 📝 Update Version Files (Stable Only)
        if: needs.validate.outputs.is-stable == 'true'
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "🔄 Updating version to: $VERSION"
          
          # Check if files exist before updating
          if [[ -f "pkl-api-auth.php" ]]; then
            if sed -i.bak "s/\(\* Version: \s*\).*/\1$VERSION/" pkl-api-auth.php; then
              echo "✅ Updated version in pkl-api-auth.php"
            else
              echo "❌ Failed to update pkl-api-auth.php"
              exit 1
            fi
          else
            echo "⚠️ pkl-api-auth.php not found, skipping version update"
          fi
          
          if [[ -f "readme.txt" ]] && grep -q "Stable tag:" readme.txt; then
            if sed -i.bak "s/\(Stable tag: \s*\).*/\1$VERSION/" readme.txt; then
              echo "✅ Updated stable tag in readme.txt"
            else
              echo "❌ Failed to update readme.txt"
              exit 1
            fi
          else
            echo "⚠️ readme.txt not found or no stable tag found"
          fi
          
          rm -f *.bak

      - name: 💾 Commit Version Updates (Stable Only)
        if: needs.validate.outputs.is-stable == 'true'
        run: |
          if git diff --quiet; then
            echo "ℹ️ No changes to commit"
          else
            git add .
            git commit -m "🔖 bump version to ${{ needs.validate.outputs.version }}"
          
            # Try to push to main if we're on main, otherwise create PR
            CURRENT_BRANCH=$(git branch --show-current)
            if [[ "$CURRENT_BRANCH" == "main" ]]; then
              git push origin main
              echo "✅ Version files updated and pushed to main"
            else
              git push origin "$CURRENT_BRANCH"
              echo "✅ Version files updated on branch $CURRENT_BRANCH"
              echo "💡 Consider creating a PR to merge these changes to main"
            fi
          fi

      - name: 📦 Create Distribution Package
        run: |
          echo "📦 Creating clean distribution package..."
          
          TEMP_DIR=$(mktemp -d)
          DIST_DIR="$TEMP_DIR/${{ env.PLUGIN_NAME }}"
          
          mkdir -p "$DIST_DIR"
          
          # Copy files, excluding development files
          rsync -av \
            --exclude='.git*' \
            --exclude='.github/' \
            --exclude='.vscode/' \
            --exclude='.idea/' \
            --exclude='node_modules/' \
            --exclude='tests/' \
            --exclude='*.md' \
            --exclude='*.json' \
            --exclude='*.lock' \
            --exclude='*.log' \
            --exclude='*.tmp' \
            --exclude='update-version.js' \
            --exclude='composer.*' \
            --exclude='package*' \
            --exclude='yarn.lock' \
            --exclude='.distignore' \
            --exclude='.editorconfig' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='phpcs.xml*' \
            --exclude='phpunit.xml*' \
            --exclude='webpack.config.js' \
            ./ "$DIST_DIR/" || {
              echo "❌ Failed to copy files"
              exit 1
            }
          
          cd "$TEMP_DIR"
          ZIP_FILE="${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}.zip"
          zip -r "$ZIP_FILE" "${{ env.PLUGIN_NAME }}/"
          
          mv "$ZIP_FILE" "$GITHUB_WORKSPACE/"
          
          echo "📊 Package Information:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ls -la "$GITHUB_WORKSPACE/$ZIP_FILE"
          unzip -l "$GITHUB_WORKSPACE/$ZIP_FILE" | head -20
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV

      - name: 📤 Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package
          path: ${{ env.ZIP_FILE }}
          retention-days: 30

  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [ validate, build ]
    permissions:
      contents: write

    steps:
      - name: 📥 Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-package

      - name: 📋 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is-prerelease }}"
          
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            RELEASE_TITLE="Pre-Release v${VERSION}"
            RELEASE_TYPE_BADGE="🧪 Pre-release"
          else
            RELEASE_TITLE="Release v${VERSION}"
            RELEASE_TYPE_BADGE="✅ Stable"
          fi
          
          cat << EOF > release-notes.md
          # ${RELEASE_TITLE}
          
          ### 📦 Package Information
          - **Version**: \`${VERSION}\`
          - **Type**: ${RELEASE_TYPE_BADGE}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ### 📥 Installation
          1. Download the plugin zip file below
          2. Upload to your WordPress site via Admin → Plugins → Add New → Upload
          3. Activate the plugin          
          ---
          *This document was automatically generated by GitHub Actions*
          EOF

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: "Release v${{ needs.validate.outputs.version }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is-prerelease }}
          files: |
            ${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Release Summary
        run: |
          echo "🎉 v${{ needs.validate.outputs.version }} created successfully!"
          echo "📦 Package: ${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}.zip"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate.outputs.version }}"